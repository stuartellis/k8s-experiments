---
# SPDX-FileCopyrightText: 2025-present Stuart Ellis <stuart@stuartellis.name>
#
# SPDX-License-Identifier: MIT
#
# Terraform and OpenTofu tasks for the Task runner:
#
# https://taskfile.dev
#
# Requirements:
#
# - Git
# - POSIX shell
# - Terraform or OpenTofu
#
# It requires these environment variables to work on a stack:
#
# CONTEXT - TF configuration
# STACK - Name of stack
#
# Set these variables to override the defaults:
#
# PRODUCT_NAME - Name of project
# TF_CLI_EXE - The Terraform or OpenTofu executable to use
# VARIANT - Name of TF workspace
# TF_REMOTE_BACKEND - Enables remote TF backend
#
# Set TF_REMOTE_BACKEND to "false" to use local backend:
#
# TF_REMOTE_BACKEND=false
#
# yamllint disable rule:line-length

version: "3"

## Variables ##

vars:
  # Defaults
  DEFAULT_TF_CLI_EXE: terraform
  DEFAULT_VARIANT: default
  DEFAULT_PRODUCT_NAME:
    ref: "base .ROOT_DIR"

  # Variables to override

  # Override with TF_CLI_EXE to specify the Terraform or OpenTofu executable
  # To use OpenTofu, specify: TF_CLI_EXE=tofu
  CURRENT_TF_CLI_EXE:
    ref: "default .DEFAULT_TF_CLI_EXE .TF_CLI_EXE"
  # Override with VARIANT to specify the name of the TF workspace
  CURRENT_VARIANT:
    ref: "default .DEFAULT_VARIANT .VARIANT"
  # Override with PRODUCT_NAME to specify the name of the product or project
  CURRENT_PRODUCT_NAME:
    ref: "default .DEFAULT_PRODUCT_NAME .PRODUCT_NAME"

  # Pre-set variables
  TF_TOOLS_ROOT_DIR: tf
  TF_TOOLS_SHARED_CONTEXT: all
  TF_TOOLS_TEMPLATE_NAME: template

  # Calculated variables

  TF_TOOLS_CONTEXTS_DIR: "{{.ROOT_DIR}}/{{.TF_TOOLS_ROOT_DIR}}/contexts"
  TF_TOOLS_STACKS_DIR: "{{.ROOT_DIR}}/{{.TF_TOOLS_ROOT_DIR}}/definitions"
  TF_TOOLS_STACK_DIR: "{{.TF_TOOLS_STACKS_DIR}}/{{.STACK}}"
  TF_TOOLS_TMP_DIR: "{{.ROOT_DIR}}/tmp/{{.TF_TOOLS_ROOT_DIR}}"

  TF_CLI_BACKEND_FALSE_OPT: "-backend=false"
  TF_CLI_CHDIR_OPT: "-chdir={{.TF_TOOLS_STACK_DIR}}"
  TF_CLI_VAR_FILES_OPT: "-var-file={{.TF_TOOLS_CONTEXTS_DIR}}/{{.TF_TOOLS_SHARED_CONTEXT}}/{{.STACK}}.tfvars -var-file={{.TF_TOOLS_CONTEXTS_DIR}}/{{.CONTEXT}}/{{.STACK}}.tfvars"

  TF_TOOLS_CONTEXTS:
    sh: ls -d {{.TF_TOOLS_CONTEXTS_DIR}}/*/ | xargs -n 1 basename
  TF_TOOLS_CONTEXTS_LIST:
    ref: 'splitList "\n" .TF_TOOLS_CONTEXTS'
  TF_TOOLS_FILTERED_CONTEXTS:
    ref: "without .TF_TOOLS_CONTEXTS_LIST .TF_TOOLS_SHARED_CONTEXT .TF_TOOLS_TEMPLATE_NAME"

  TF_TOOLS_STACKS:
    sh: ls -d {{.TF_TOOLS_STACKS_DIR}}/*/ | xargs -n 1 basename
  TF_TOOLS_STACKS_LIST:
    ref: 'splitList "\n" .TF_TOOLS_STACKS'
  TF_TOOLS_FILTERED_STACKS:
    ref: "without .TF_TOOLS_STACKS_LIST .TF_TOOLS_TEMPLATE_NAME"

env:
  TF_WORKSPACE: "{{.CURRENT_VARIANT}}"

## Tasks ##

tasks:
  apply:
    desc: Apply TF stack
    cmds:
      - "{{.CURRENT_TF_CLI_EXE}} {{.TF_CLI_CHDIR_OPT}} apply {{.TF_CLI_PLAN_PATH}}.tfplan"
    requires:
      vars: [CONTEXT, STACK]
    vars:
      TF_TOOLS_CONTEXT_DOCUMENT:
        sh: cat {{.TF_TOOLS_CONTEXTS_DIR}}/{{.CONTEXT}}/context.json
      TF_TOOLS_CONTEXT_CONFIG:
        ref: "fromJson .TF_TOOLS_CONTEXT_DOCUMENT"
      TF_CLI_PLAN_PATH: "{{.TF_TOOLS_TMP_DIR}}/{{.CURRENT_PRODUCT_NAME}}-{{.STACK}}-{{.TF_TOOLS_CONTEXT_CONFIG.metadata.environment}}-{{.CURRENT_VARIANT}}"

  check-fmt:
    desc: Check formatting of TF code for stack
    cmds:
      - for:
          var: TF_TOOLS_FILTERED_CONTEXTS
        cmd: "{{.CURRENT_TF_CLI_EXE}} fmt -check -diff -recursive {{.TF_TOOLS_CONTEXTS_DIR}}/{{.ITEM}}/{{.STACK}}.tfvars"
      - cmd: "{{.CURRENT_TF_CLI_EXE}} fmt -check -diff -recursive {{.TF_TOOLS_CONTEXTS_DIR}}/{{.TF_TOOLS_SHARED_CONTEXT}}/{{.STACK}}.tfvars"
      - "{{.CURRENT_TF_CLI_EXE}} {{.TF_CLI_CHDIR_OPT}} fmt -check -diff -recursive"
    requires:
      vars: [STACK]

  clean:
    desc: Clean TF stack
    cmds:
      - "rm -fr {{.TF_TOOLS_STACK_DIR}}/.terraform"
      - "rm -f {{.TF_TOOLS_TMP_DIR}}/{{.CURRENT_PRODUCT_NAME}}-{{.STACK}}-*.tfplan"
      - "rm -f {{.TF_TOOLS_TMP_DIR}}/{{.CURRENT_PRODUCT_NAME}}-{{.STACK}}-*.json"
    requires:
      vars: [STACK]

  console:
    desc: TF console for stack
    aliases:
      - shell
    interactive: true
    cmds:
      - terraform {{.TF_CLI_CHDIR_OPT}} console {{.TF_CLI_VARS_OPT}} {{.TF_CLI_VAR_FILES_OPT}}
    requires:
      vars: [CONTEXT, CURRENT_PRODUCT_NAME, STACK, CURRENT_VARIANT]
    vars:
      TF_TOOLS_CONTEXT_DOCUMENT:
        sh: cat {{.TF_TOOLS_CONTEXTS_DIR}}/{{.CONTEXT}}/context.json
      TF_TOOLS_CONTEXT_CONFIG:
        ref: "fromJson .TF_TOOLS_CONTEXT_DOCUMENT"
      TF_CLI_VARS_OPT: "-var='product_name={{.CURRENT_PRODUCT_NAME}}' -var='stack_name={{.STACK}}' -var='environment_name={{.TF_TOOLS_CONTEXT_CONFIG.metadata.environment}}' -var='variant={{.CURRENT_VARIANT}}'"

  destroy:
    desc: Destroy resources for TF stack
    cmds:
      - "{{.CURRENT_TF_CLI_EXE}} {{.TF_CLI_CHDIR_OPT}} apply -destroy -auto-approve {{.TF_CLI_VARS_OPT}} {{.TF_CLI_VAR_FILES_OPT}}"
    requires:
      vars: [CONTEXT, CURRENT_PRODUCT_NAME, STACK, CURRENT_VARIANT]
    vars:
      TF_TOOLS_CONTEXT_DOCUMENT:
        sh: cat {{.TF_TOOLS_CONTEXTS_DIR}}/{{.CONTEXT}}/context.json
      TF_TOOLS_CONTEXT_CONFIG:
        ref: "fromJson .TF_TOOLS_CONTEXT_DOCUMENT"
      TF_CLI_VARS_OPT: "-var='product_name={{.CURRENT_PRODUCT_NAME}}' -var='stack_name={{.STACK}}' -var='environment_name={{.TF_TOOLS_CONTEXT_CONFIG.metadata.environment}}' -var='variant={{.CURRENT_VARIANT}}'"

  fmt:
    desc: Format code for TF stack
    cmds:
      - "{{.CURRENT_TF_CLI_EXE}} {{.TF_CLI_CHDIR_OPT}} fmt"
      - for:
          var: TF_TOOLS_FILTERED_CONTEXTS
        cmd: "{{.CURRENT_TF_CLI_EXE}} fmt {{.TF_TOOLS_CONTEXTS_DIR}}/{{.ITEM}}/{{.STACK}}.tfvars"
      - cmd: "{{.CURRENT_TF_CLI_EXE}} fmt {{.TF_TOOLS_CONTEXTS_DIR}}/{{.TF_TOOLS_SHARED_CONTEXT}}/{{.STACK}}.tfvars"
    requires:
      vars: [STACK]

  forget:
    desc: Delete a variant from TF remote backend
    cmds:
      - "{{.CURRENT_TF_CLI_EXE}} {{.TF_CLI_CHDIR_OPT}} workspace delete {{.VARIANT}}"
    requires:
      vars: [STACK, VARIANT]
    env:
      TF_WORKSPACE: "{{.DEFAULT_VARIANT}}"

  init:
    desc: Init TF stack
    deps: [clean]
    cmds:
      - "{{.CURRENT_TF_CLI_EXE}} {{.TF_CLI_CHDIR_OPT}} init -input=false {{.TF_CLI_BACKEND_OPT}}"
    requires:
      vars: [CONTEXT, STACK]
    vars:
      TF_CLI_BACKEND_DOCUMENT:
        sh: cat {{.TF_TOOLS_CONTEXTS_DIR}}/{{.CONTEXT}}/context.json
      TF_CLI_BACKEND_CONFIG:
        ref: "fromJson .TF_CLI_BACKEND_DOCUMENT"
      TF_CLI_BACKEND_S3_OPT: >
        -backend-config=\"encrypt=true\"
        -backend-config=\"workspace_key_prefix=workspaces\"
        -backend-config=\"assume_role={role_arn=\\\"{{.TF_CLI_BACKEND_CONFIG.backend_s3.role_arn}}\\\"}\"
        -backend-config=\"region={{.TF_CLI_BACKEND_CONFIG.backend_s3.region}}\"
        -backend-config=\"bucket={{.TF_CLI_BACKEND_CONFIG.backend_s3.tfstate_bucket}}\"
        -backend-config=\"dynamodb_table={{.TF_CLI_BACKEND_CONFIG.backend_s3.tfstate_ddb_table}}\"
        -backend-config=\"key=stacks/{{.CURRENT_PRODUCT_NAME}}/{{.TF_CLI_BACKEND_CONFIG.backend_s3.tfstate_dir}}/{{.STACK}}.tfstate\"
      # This is currently hard-coded to use S3 as the remote TF backend
      TF_CLI_BACKEND_OPT:
        sh: echo {{if eq .TF_REMOTE_BACKEND "false"}}{{.TF_CLI_BACKEND_FALSE_OPT}}{{else}}{{.TF_CLI_BACKEND_S3_OPT}}{{end}}

  new:
    desc: Create new TF stack
    cmds:
      - cp -r "{{.TF_TOOLS_STACKS_DIR}}/template" "{{.TF_TOOLS_STACKS_DIR}}/{{.STACK}}"
      - for:
          var: TF_TOOLS_FILTERED_CONTEXTS
        cmd: cp "{{.TF_TOOLS_CONTEXTS_DIR}}/template/standard.tfvars" "{{.TF_TOOLS_CONTEXTS_DIR}}/{{.ITEM}}/{{.STACK}}.tfvars"
      - cmd: cp "{{.TF_TOOLS_CONTEXTS_DIR}}/template/standard.tfvars" "{{.TF_TOOLS_CONTEXTS_DIR}}/{{.TF_TOOLS_SHARED_CONTEXT}}/{{.STACK}}.tfvars"
    requires:
      vars: [STACK]

  plan:
    desc: Create TF plan for stack
    cmds:
      - mkdir -p "{{.TF_TOOLS_TMP_DIR}}"
      - "{{.CURRENT_TF_CLI_EXE}} {{.TF_CLI_CHDIR_OPT}} plan -out={{.TF_CLI_PLAN_PATH}}.tfplan {{.TF_CLI_VARS_OPT}} {{.TF_CLI_VAR_FILES_OPT}}"
      - "{{.CURRENT_TF_CLI_EXE}} {{.TF_CLI_CHDIR_OPT}} show -json {{.TF_CLI_PLAN_PATH}}.tfplan > {{.TF_CLI_PLAN_PATH}}.json"
    requires:
      vars: [CONTEXT, CURRENT_PRODUCT_NAME, STACK, CURRENT_VARIANT]
    vars:
      TF_TOOLS_CONTEXT_DOCUMENT:
        sh: cat {{.TF_TOOLS_CONTEXTS_DIR}}/{{.CONTEXT}}/context.json
      TF_TOOLS_CONTEXT_CONFIG:
        ref: "fromJson .TF_TOOLS_CONTEXT_DOCUMENT"
      TF_CLI_PLAN_PATH: "{{.TF_TOOLS_TMP_DIR}}/{{.CURRENT_PRODUCT_NAME}}-{{.STACK}}-{{.TF_TOOLS_CONTEXT_CONFIG.metadata.environment}}-{{.CURRENT_VARIANT}}"
      TF_CLI_VARS_OPT: "-var='product_name={{.CURRENT_PRODUCT_NAME}}' -var='stack_name={{.STACK}}' -var='environment_name={{.TF_TOOLS_CONTEXT_CONFIG.metadata.environment}}' -var='variant={{.CURRENT_VARIANT}}'"

  rm:
    desc: Remove code for TF stack
    cmds:
      - rm -fr "{{.TF_TOOLS_STACKS_DIR}}/{{.STACK}}"
      - for:
          var: TF_TOOLS_FILTERED_CONTEXTS
        cmd: rm -f "{{.TF_TOOLS_CONTEXTS_DIR}}/{{.ITEM}}/{{.STACK}}.tfvars"
    requires:
      vars: [STACK]

  stacks:
    desc: List TF stacks
    aliases:
      - stacks
    silent: true
    cmds:
      - for:
          var: TF_TOOLS_FILTERED_STACKS
        cmd: echo "{{.ITEM}}"

  test:
    desc: Run TF test for stack
    cmds:
      - "{{.CURRENT_TF_CLI_EXE}} {{.TF_CLI_CHDIR_OPT}} test {{.TF_CLI_VARS_OPT}} {{.TF_CLI_VAR_FILES_OPT}}"
    requires:
      vars: [CONTEXT, CURRENT_PRODUCT_NAME, STACK, CURRENT_VARIANT]
    vars:
      TF_TOOLS_CONTEXT_DOCUMENT:
        sh: cat {{.TF_TOOLS_CONTEXTS_DIR}}/{{.CONTEXT}}/context.json
      TF_TOOLS_CONTEXT_CONFIG:
        ref: "fromJson .TF_TOOLS_CONTEXT_DOCUMENT"
      TF_CLI_VARS_OPT: "-var='product_name={{.CURRENT_PRODUCT_NAME}}' -var='stack_name={{.STACK}}' -var='environment_name={{.TF_TOOLS_CONTEXT_CONFIG.metadata.environment}}' -var='variant={{.CURRENT_VARIANT}}'"

  validate:
    desc: Validate TF stack
    cmds:
      - "{{.CURRENT_TF_CLI_EXE}} {{.TF_CLI_CHDIR_OPT}} validate"
    requires:
      vars: [STACK]

  ## Context tasks ##

  context:list:
    desc: List contexts
    aliases:
      - contexts
    silent: true
    cmds:
      - for:
          var: TF_TOOLS_FILTERED_CONTEXTS
        cmd: echo "{{.ITEM}}"

  context:new:
    desc: Create a new TF context
    cmds:
      - mkdir -p "{{.TF_TOOLS_CONTEXTS_DIR}}/{{.CONTEXT}}"
      - for:
          var: TF_TOOLS_FILTERED_STACKS
        cmd: cp "{{.TF_TOOLS_CONTEXTS_DIR}}/template/standard.tfvars" "{{.TF_TOOLS_CONTEXTS_DIR}}/{{.CONTEXT}}/{{.ITEM}}.tfvars"
      - cp "{{.TF_TOOLS_CONTEXTS_DIR}}/template/context.json" "{{.TF_TOOLS_CONTEXTS_DIR}}/{{.CONTEXT}}"
    requires:
      vars: [CONTEXT]

  context:rm:
    desc: Remove a TF context
    cmds:
      - rm -fr "{{.TF_TOOLS_CONTEXTS_DIR}}/{{.CONTEXT}}"
    requires:
      vars: [CONTEXT]
